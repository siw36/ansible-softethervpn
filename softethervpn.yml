---
- name: "Deploy or update a Softether VPN server"
  hosts: softethervpn
  remote_user: ansible
  become: yes
  become_method: sudo
  
  vars_prompt:
  - name: "link"
    prompt: "Download link to Softether VPN server files"
    default: "https://github.com/SoftEtherVPN/SoftEtherVPN_Stable/releases/download/v4.28-9669-beta/softether-vpnserver-v4.28-9669-beta-2018.09.11-linux-x64-64bit.tar.gz"
    private: no

  tasks:
  - name: "Update the host OS"
    yum:
      name: '*'
      state: latest
    
  - name: "Install dependencies (yum)"
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - make
      - gcc
      - zlib-devel
      - openssl-devel
      - readline-devel
      - ncurses-devel
      - curl
      - gzip
      - tar

  - name: "Download pip"
    get_url:
      url: "https://bootstrap.pypa.io/get-pip.py"
      dest: /tmp/get-pip.py

  - name: "Install pip"
    command: "python /tmp/get-pip.py"

  - name: "Upgrade pip"
    command: "pip install -U pip"

  - name: "Install dependencies (pip)"
    pip:
      name: setuptools
      #name: virtualenv
      name: pexpect
      state: latest
  
  - name: "Check if this play should update an existing server or install for the first time"
    stat:
      path: /usr/local/vpnserver
    register: file_details
  - debug:
      msg: "/usr/local/vpnserver exists - update will be performed"
    when: file_details.stat.exists == True
  - debug:
      msg: "/usr/local/vpnserver does not exist - new install will be performed"
    when: file_details.stat.exists == False
    
  - name: "Stop the service"
    systemd:
      name: vpnserver
      state: stopped
    when: file_details.stat.exists == True
 
  - name: "Create tmp dir"
    file:
      path: /tmp/vpnserver
      state: directory
      mode: 0755
  
  - name: "Download Softether VPN server files"
    unarchive:
      src: "{{ link }}"
      dest: /tmp/vpnserver
      remote_src: yes
      owner: ansible
      group: ansible
      mode: 0750    

  - name: "Compile the executables and accept license"
    expect:
      command: make
      chdir: /tmp/vpnserver/vpnserver
      responses:
        (?i)Please choose one of above number: "1"   
    
  - name: "(UPDATE) Replace old executables and hamcore.se2 files with new ones"
    copy:
      src: /tmp/vpnserver/vpnserver/{{ item }}
      dest: /usr/local/vpnserver/{{ item }}
      force: yes
      remote_src: yes
    with_items:
    - vpnserver
    - vpncmd
    - hamcore.se2
    when: file_details.stat.exists == True
    
  - name: "(NEW INSTALL) Copy server files to /usr/local/vpnserver"
    command: "cp -r /tmp/vpnserver/vpnserver /usr/local/vpnserver"
    when: file_details.stat.exists == False
    
  - name: "Set general permissions"
    file:
      path: /usr/local/vpnserver
      owner: root
      group: ansible
      mode: 0750
    become: yes
    
  - name: "Set executable permissions"
    file:
      path: /usr/local/vpnserver/{{item}}
      owner: root
      group: ansible
      mode: 0750
    with_items:
    - vpnserver
    - vpncmd
    become: yes

  - name: "Opening default Softether VPN ports"
    firewalld:
      port: "{{item}}"
      permanent: yes
      state: enabled
    with_items:
    - '1194/tcp'
    - '5555/tcp'
    - '1194/udp'
    - '500/udp'
    - '1701/udp'
    - '4500/udp'
    - '992/tcp'
    - '443/tcp'

  - name: "Reload firewall"
    command: firewall-cmd --reload

  - name: "Copy systemd script"
    copy:
      src: systemd/vpnserver
      dest: /lib/systemd/system/vpnserver.service
      mode: 0755

  - name: "Reload systemd daemon"
    command: systemctl daemon-reload

  - name: "Start vpnserver service"
    systemd:
      name: vpnserver
      state: started
  
  - name: "Enable vpnserver service"
    systemd:
      name: vpnserver
      enabled: yes

  - debug:
      msg:
      - "The installation/update of Softether VPN server is now complete"
      - "Use the 'Server Manager' from Softether to configure your server:"
      - "https://www.softether.org/4-docs/1-manual/2._SoftEther_VPN_Essential_Architecture/2.4_VPN_Server_Manager"
      - "Connection details:"
      - "{{ ansible_all_ipv4_addresses }}"
